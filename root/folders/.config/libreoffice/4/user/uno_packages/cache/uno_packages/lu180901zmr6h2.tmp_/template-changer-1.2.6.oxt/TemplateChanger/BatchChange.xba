<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="BatchChange" script:language="StarBasic">&apos;*******************************************************************************
&apos;* TemplateChanger (OOo-Basic)
&apos;* Procedures to assign a template to multiple files
&apos;* also implements the handlers for DlgBatchChange
&apos;*
&apos;* Created on 2007.14.07
&apos;* 
&apos;* OOo Basic makro to change the associated template (document) 
&apos;* for the current writer document and replace all styles 
&apos;* with those from the template
&apos;* 
&apos;* Copyright (C) 2007-2009  Andr√© Schnabel (andreschnabel@openoffice.org)
&apos;*
&apos;* Parts taken from OOo Pagination by Charles Brunet
&apos;* http://extensions.services.openoffice.org/node/374
&apos;* (LGPL 2.1 or later)
&apos;* 
&apos;* This library is free software: you can redistribute it and/or modify
&apos;* it under the terms of the GNU Lesser General Public License as published by
&apos;* the Free Software Foundation, version 3 of the License.
&apos;* 
&apos;* This library is distributed in the hope that it will be useful,
&apos;* but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
&apos;* Lesser General Public License for more details.
&apos;* 
&apos;* You should have received a copy of the GNU Lesser General Public
&apos;* License along with this library. If not, see &lt;http://www.gnu.org/licenses/&gt;.
&apos;*
&apos;******************************************************************************/
Option Explicit

Dim dlgBatchChange


&apos;*******************************************************************************
&apos;* Main procedure for batch change 
&apos;*  - displays dialog to define template file and document path,
&apos;*  - main loop for assignment
&apos;*******************************************************************************
Sub Main
Dim oDesktop, oTemplate, oDoc
Dim dlgBatchStatus, cBtnOK
Dim bEndProcessing as Boolean

    &apos;init Localization first
    initL10n

    &apos; LodDialoglibrary (for parameter and status dialog)
    DialogLibraries.LoadLibrary( &quot;TemplateChanger&quot; )

    &apos; create and execute parameter dialog
    dlgBatchChange = CreateUnoDialog( DialogLibraries.TemplateChanger.DlgBatchChange )
    dlgBatchChange_Initialize (dlgBatchChange)
    bEndProcessing=false
    
    &apos; loop until Batch parameter dialog was cancelled or all parameters were ok
    While not bEndProcessing
	    If dlgBatchChange.Execute() Then
	        &apos; Dialog exit with OK
	        If FileExists (ConvertToUrl(dlgBatchChange.Model.txtTemplateFile.Text)) Then
	            If FileExists (ConvertToUrl(dlgBatchChange.Model.txtDocPath.Text)) Then 
	                Dim sSrcDir as String, sDestDir as String
	                Dim bProcessSubDirs as Boolean
	                sSrcDir=ConvertToUrl(dlgBatchChange.Model.txtDocPath.Text)
	                if Right(sSrcDir,1) = &quot;/&quot; then sSrcDir=Left(sSrcDir, Len(sSrcDir)-1)
	                sDestDir=ConvertToUrl(dlgBatchChange.Model.txtDestPath.Text)
	                bProcessSubDirs=(dlgBatchChange.Model.cBoxSubDirs.State = 1)
	
	                Dim aTestDir(), sTestDir as String
	                Dim nBound as Integer
	                aTestDir = Split(sDestDir,&quot;/&quot;)
	                nBound = UBound(aTestDir)
	                ReDim Preserve aTestDir (nBound-1)
	                sTestDir = Join (aTestDir,&quot;/&quot;)
					sTestDir = Left(sTestDir, Len(sSrcDir))
	                
	                If not (bProcessSubDirs and sTestDir = sSrcDir) _
	                Then    &apos; we do not process subdirectories or destination is not subdirectory of source
	                    If FileExists (ConvertToUrl(dlgBatchChange.Model.txtDestPath.Text)) Then 
	                    
	                    	bEndProcessing=true	&apos;all parameters ok, we do not need to call the parameter dialog again
	        
	                        &apos;load the template
	                        oDesktop =   createUnoService(&quot;com.sun.star.frame.Desktop&quot;)
	                        Dim aArgs(3)  As New com.sun.star.beans.PropertyValue
	                        aArgs(0).Name = &quot;AsTemplate&quot;
	                        aArgs(0).Value = False
	                        aArgs(1).Name=&quot;Hidden&quot;
	                        aArgs(1).Value=True
	                        aArgs(2).Name=&quot;MacroExecutionMode&quot;
	                        aArgs(2).Value=0    &apos;=NEVER_EXECUTE 
	                        aArgs(3).Name=&quot;UpdateDocMode&quot;
	                        aArgs(3).Value=1    &apos;QUIET_UPDATE 
	                        
	                        oTemplate = oDesktop.loadComponentFromURL( ConvertToUrl(dlgBatchChange.Model.txtTemplateFile.Text), &quot;_blank&quot;, 0,aArgs() )
	                    
	                        &apos;Display status dialog
	                        dlgBatchStatus = CreateUnoDialog( DialogLibraries.TemplateChanger.DlgBatchStatus )
	                        dlgBatchStatus_Initialize (dlgBatchStatus)
	                        dlgBatchStatus.visible = true
	                        wait 10
	                        
	                        &apos;start main loop
	                        assignTemplateToDocBatch (oTemplate, _
	                                                    sSrcDir, sDestDir, _
	                                                    bProcessSubDirs, _
	                                                    dlgBatchChange.Model.cBoxODT.State, dlgBatchChange.Model.cBoxSXW.State, _
	                                                    dlgBatchChange.Model.cBoxOTT.State, dlgBatchChange.Model.cBoxODM.State, _
	                                                    dlgBatchStatus )
	                        
	                        &apos; close the template
	                        oTemplate.Close (false)
	                        
	                        &apos; enable OK button in status dialog and execute the dialog (so that OK can be pressed)
	                        cBtnOk = dlgBatchStatus.GetControl (&quot;cBtnOK&quot;)
	                        cBtnOk.Enable = true
	                        dlgBatchStatus.Execute()
	                        
	                    Else &apos; if FileExists txtDstPath
	                        MsgBox ReplaceString(gL10n(L10N_ERR_DEST_PATH_NTFND), dlgBatchChange.Model.txtDestPath.Text, &quot;$folder&quot;), _
	                                16, gL10n(L10N_ERR_ERROR)
	                    EndIf &apos; if FileExists txtDestPath
	                Else
	                    MsgBox gL10n(L10N_ERR_DEST_IN_SOURCE), _
	                        16, gL10n(L10N_ERR_ERROR)
	                EndIf
	            Else &apos; if FileExists txtDocPath
	                MsgBox ReplaceString(gL10n(L10N_ERR_DOC_PATH_NTFND), dlgBatchChange.Model.txtDocPath.Text, &quot;$folder&quot;), _
	                        16, gL10n(L10N_ERR_ERROR)
	            EndIf &apos; if FileExists txtDocPath
	
	        Else &apos; if FileExists txtTemplateFile
	            MsgBox ReplaceString(gL10n(L10N_ERR_TEMPLATE_FILE_NTFND), dlgBatchChange.Model.txtTemplateFile.Text, &quot;$file&quot;), _
	                    16, gL10n(L10N_ERR_ERROR)
	
	        EndIf&apos; if FileExists txtTemplateFile
	    Else 	&apos; parameter dialog cancelled
	    	bEndProcessing=true	
	    EndIf 	&apos; parameter dialog executed
	Wend

End Sub


&apos;*******************************************************************************
&apos;* Procedure to assign one template to multiple text files
&apos;* Parameters: 
&apos;*      oTemplate   - Template document object
&apos;*      sDocPath    - path to writer documents
&apos;*      sDestPath   - Destination path documents
&apos;*      bSubDirs    - if TRUE, subdirectories will be processed recursively
&apos;*      bODT        - if TRUE, *.odt files will be processed
&apos;*      bSXW        - if TRUE, *.sxw files will be processed
&apos;*      bOTT        - if TRUE, *.ott files will be processed
&apos;*      bODM        - if TRUE, *.odm files will be processed
&apos;*      dlgStatus   - the status dialog object
&apos;*******************************************************************************
Sub assignTemplateToDocBatch (oTemplate, sDocPath, sDestPath,  bSubDirs, bODT, bSXW, bOTT, bODM, dlgStatus )
Dim aFiles() as String, aSubDirs() as String,aFile() as String
Dim nFiles as Integer, nFilesOK as Integer, nFilesERR as Integer, nSubDirs as Integer, nAttr as Integer, i as Integer
Dim sDir as String, sExt as String, sDestFile as String
Dim sPathSeparator as String
Dim oDesktop, oDoc
Dim lblNumFICnt, lblNumFIOK, lblNumFIERR, tFldLog
Dim bFileIOErr as Boolean

    &apos;get dialog controls
    lblNumFICnt = dlgStatus.GetControl(&quot;lblNumFICnt&quot;)
    lblNumFIOK = dlgStatus.GetControl(&quot;lblNumFIOK&quot;)
    lblNumFIERR = dlgStatus.GetControl(&quot;lblNumFIERR&quot;)
    tFldLog = dlgStatus.GetControl(&quot;tFldLog&quot;)
    
    &apos; load tools library for URL conversion and string manipulation
    BasicLibraries.LoadLibrary(&quot;Tools&quot;)
    sPathSeparator = &quot;/&quot;    &apos;always used slash, as we work with URL syntax

    &apos; init local values
    nFiles = 0
    nFilesOK = CInt(lblNumFIOK.Text)
    nFilesERR = CInt(lblNumFIERR.Text)

    &apos; build Filelist
    sDir = Dir ( sDocPath +  sPathSeparator + &quot;*&quot;)
    While sDir &lt;&gt; &quot;&quot;
        &apos; Test if file
        nAttr=GetAttr (sDocPath +  sPathSeparator + sDir)
        If nAttr = 0 or nAttr=32  Then&apos; regular Files
            aFile = Split (sDir,&quot;.&quot;)
            sExt=aFile(ubound(aFile))
            If  (sExt = &quot;odt&quot; and bODT) or _
                (sExt = &quot;sxw&quot; and bSXW) or _
                (sExt = &quot;ott&quot; and bOTT) or _
                (sExt = &quot;odm&quot; and bODM) Then
                
                &apos; add file to the list
                nFiles = nFiles + 1
                Redim Preserve aFiles (nFiles-1)
                aFiles(nFiles-1) = sDocPath +  sPathSeparator + sDir

            EndIf
        EndIf
        sDir=Dir &apos;get next dir entry
    Wend
    
    &apos;Update status dialog with number of files to process
    lblNumFICnt.Text = CStr(nFiles + CInt(lblNumFICnt.Text))
    wait 1
    
    &apos;Process files in current Directory
    oDesktop =   createUnoService(&quot;com.sun.star.frame.Desktop&quot;)
    Dim aArgs(1) As New com.sun.star.beans.PropertyValue
    aArgs(0).Name=&quot;Hidden&quot;
    aArgs(0).Value=True
    aArgs(1).Name = &quot;AsTemplate&quot;
    aArgs(1).Value = False
    
    On local Error Goto fileIOErr

    For i = 0 To nFiles-1
        &apos; open Document and assign the template per document
        oDoc = oDesktop.loadComponentFromURL( aFiles(i), &quot;_blank&quot;, 0,aArgs() )
        If bFileIOErr Then &apos;File Open Error
            &apos; update status dialog (do not save the document)
            nFilesERR = nFilesERR +1
            lblNumFIERR.Text = CStr(nFilesERR)
            tFldLog.Text = ConvertFromURL(aFiles(i)) + _
                            &quot; (&quot; + gL10n(L10N_ERR_FILE_OPEN) +&quot;)&quot; + _
                            CHR(10) + tFldLog.Text 
            wait 1
        Else
            If (assignTemplateToDoc (oTemplate, oDoc) &lt;= 0) Then
                &apos;only save, if no error occured
                sDestFile = sDestPath + Mid (oDoc.URL, Len(sDocPath)+1 )
                oDoc.StoreAsURL ( sDestFile, aArgs )
                If bFileIOErr Then &apos;File Save Error
                    &apos; update status dialog (do not save the document)
                    nFilesERR = nFilesERR +1
                    lblNumFIERR.Text = CStr(nFilesERR)
                    tFldLog.Text = ConvertFromURL(aFiles(i)) + _
                                    &quot; (&quot; + gL10n(L10N_ERR_FILE_SAVE) +&quot;)&quot; + _
                                    CHR(10) + tFldLog.Text 
                    wait 1
                Else
                    &apos;update status dialog with number of correctly processed files 
                    nFilesOK = nFilesOK+1
                    lblNumFIOK.Text = CStr(nFilesOK)
                    &apos;update status log
                    tFldLog.Text = ConvertFromURL(aFiles(i)) + &quot; (&quot; + gL10n(L10N_OK) + &quot;)&quot; + CHR(10) + tFldLog.Text 
                    wait 1
                EndIf
            Else
                &apos; Error occured - update status dialog (do not save the document)
                nFilesERR = nFilesERR +1
                lblNumFIERR.Text = CStr(nFilesERR)
                tFldLog.Text = ConvertFromURL(aFiles(i)) + _
                                &quot; (&quot; + gL10n(L10N_ERR_ASSIGN_TEMPLATE) +&quot;)&quot; + _
                                CHR(10) + tFldLog.Text 
                wait 1
            EndIf
            &apos; Close current document and process next
            oDoc.Close (false)
        EndIf
    Next i
    
    &apos;Process subdirectories, if requested by user
    If bSubDirs Then
        &apos; build list of subdirectories
        sDir = Dir ( sDocPath +  sPathSeparator + &quot;*&quot;, 16)
        While sDir &lt;&gt; &quot;&quot;
            If sDir &lt;&gt; &quot;.&quot; And sDir &lt;&gt; &quot;..&quot; Then
                nSubDirs = nSubDirs +1
                Redim Preserve aSubDirs (nSubDirs-1)
                aSubDirs(nSubDirs-1) = sDocPath +  sPathSeparator + sDir
            EndIf
            sDir=Dir &apos;get next dir entry
        Wend
        
        &apos; process list of directories using recursive call
        For i = 0 To nSubDirs-1
            assignTemplateToDocBatch (oTemplate, _
                                        aSubDirs(i), sDestPath + Mid (aSubDirs(i), Len(sDocPath) +1 ),  _
                                        bSubDirs, bODT, bSXW, bOTT, bODM, dlgStatus )
        Next i
    EndIf
    
    Exit Sub

&apos;--------- Error handling
fileIOErr:
    bFileIOErr=true
    Resume Next


End Sub


&apos;*******************************************************************************
&apos;* Initialization of the parameter dialog
&apos;*  - set l10n strings
&apos;*******************************************************************************
Sub dlgBatchChange_Initialize (oDlg)

    &apos; l10n Dialog strings
    oDlg.Title = gL10n(L10N_DLGBC_TITLE)
    oDlg.Model.lblTemplateFile.Label  = gL10n(L10N_DLGBC_LBL_TEMPLATE_FILE)
    oDlg.Model.lblDocPath.Label  = gL10n(L10N_DLGBC_LBL_DOC_PATH)
    oDlg.Model.lblDestPath.Label  = gL10n(L10N_DLGBC_LBL_DEST_PATH)
    oDlg.Model.cBoxSubDirs.Label  = gL10n(L10N_DLGBC_CBOX_SUB_DIR)
    oDlg.Model.frmDocTypes.Label  = gL10n(L10N_DLGBC_FRM_DOCTYPES)
    oDlg.Model.cBoxODT.Label  = gL10n(L10N_DLGBC_CBOX_ODT)
    oDlg.Model.cBoxSXW.Label  = gL10n(L10N_DLGBC_CBOX_SXW)
    oDlg.Model.cBoxOTT.Label  = gL10n(L10N_DLGBC_CBOX_OTT)
    oDlg.Model.cBoxODM.Label  = gL10n(L10N_DLGBC_CBOX_ODM)
    oDlg.Model.cBtnOK.Label  = gL10n(L10N_DLGBC_CBTN_OK)
    oDlg.Model.cBtnCancel.Label  = gL10n(L10N_DLGBC_CBTN_CANCEL)

End Sub

&apos;*******************************************************************************
&apos;* Initialization of the status dialog
&apos;*  - set l10n strings
&apos;*******************************************************************************
Sub dlgBatchStatus_Initialize (oDlg)

    &apos; l10n Dialog strings
    oDlg.Title = gL10n(L10N_DLGBS_TITLE)
    oDlg.Model.lblTxtFICnt.Label  = gL10n(L10N_DLGBS_LBL_FI_CNT)
    oDlg.Model.lblTxtFIOk.Label  = gL10n(L10N_DLGBS_LBL_FI_OK)
    oDlg.Model.lblTxtFIErr.Label  = gL10n(L10N_DLGBS_LBL_FI_ERR)
    oDlg.Model.lblLog.Label  = gL10n(L10N_DLGBS_LBL_LOG)
    oDlg.Model.cBtnOK.Label  = gL10n(L10N_DLGBS_CBTN_OK)

End Sub

&apos;*******************************************************************************
&apos;* Action handler for the file select button in parameter dialog
&apos;*  - displays a file selector, that allows to select a template
&apos;*  - if template is selected, file name is written to the textbox in the
&apos;*      parameter dialog
&apos;*******************************************************************************
Sub dlgBC_cBtnFileSelect_onAction
Dim sFile as String

    sFile=selectTemplateFile(ConvertToUrl(dlgBatchChange.Model.txtTemplateFile.Text))
    If sFile &lt;&gt; &quot;&quot; Then 
        dlgBatchChange.Model.txtTemplateFile.Text=ConvertFromUrl(sFile)
    EndIf
    
End Sub

&apos;*******************************************************************************
&apos;* Action handler for the docpath select button in parameter dialog
&apos;*  - displays a folder picker, that allows to select the documents folder
&apos;*  - if folder is selected, folder name is written to the textbox in the
&apos;*      parameter dialog
&apos;*
&apos;* ToDo: workaround for broken KDE dialogs, check with Mac/aqua
&apos;*******************************************************************************
Sub dlgBC_cBtnDocPath_onAction
Dim sPath as String
Dim oFolderDialog 

    oFolderDialog = CreateUnoService(&quot;com.sun.star.ui.dialogs.FolderPicker&quot;)
    sPath = ConvertToUrl(dlgBatchChange.Model.txtDocPath.Text)
    If FileExists (sPath) Then
        oFolderDialog.SetDisplayDirectory(sPath)
    EndIf

    If oFolderDialog.Execute() Then
        dlgBatchChange.Model.txtDocPath.Text=ConvertFromUrl(oFolderDialog.GetDirectory())
        dlgBC_txtDocPath_onLeave
    EndIf
    
End Sub

&apos;*******************************************************************************
&apos;* Action handler for the destpath select button in parameter dialog
&apos;*  - displays a folder picker, that allows to select the destination folder
&apos;*  - if folder is selected, folder name is written to the textbox in the
&apos;*      parameter dialog
&apos;*  - if destination folder = doc folder, display a warning
&apos;*
&apos;* ToDo: workaround for broken KDE dialogs, check with Mac/aqua
&apos;*******************************************************************************
Sub dlgBC_cBtnDestPath_onAction
Dim oFolderDialog

    oFolderDialog = CreateUnoService(&quot;com.sun.star.ui.dialogs.FolderPicker&quot;)
    oFolderDialog.SetDisplayDirectory(ConvertToUrl(dlgBatchChange.Model.txtDestPath.Text))

    If oFolderDialog.Execute() Then
        dlgBatchChange.Model.txtDestPath.Text=ConvertFromUrl(oFolderDialog.GetDirectory())
        dlgBC_txtDestPath_onLeave
    EndIf
    
End Sub

&apos;*******************************************************************************
&apos;* Action handler for the DocPath text Field - leave
&apos;*  - if destination folder = doc folder, display a warning
&apos;*
&apos;* ToDo: check, if event is fired in all cases
&apos;*******************************************************************************
Sub dlgBC_txtDocPath_onLeave

    If dlgBatchChange.Model.txtDocPath.Text &lt;&gt; &quot;&quot; and _
        dlgBatchChange.Model.txtDocPath.Text = dlgBatchChange.Model.txtDestPath.Text _
    Then 
        MsgBox ( gL10n(L10n_WARN_DEST_SAME_AS_DOC), _
                0 + 64 , gL10n(L10N_NOTIFICATION))
    EndIf
    
End Sub

&apos;*******************************************************************************
&apos;* Action handler for the destpath text Field - leave
&apos;*  - if destination folder = doc folder, display a warning
&apos;*
&apos;* ToDo: check, if event is fired in all cases
&apos;*******************************************************************************
Sub dlgBC_txtDestPath_onLeave

    dlgBC_txtDocPath_onLeave

End Sub

</script:module>